Index: homework-2/src/test/resources/junit-platform.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/homework-2/src/test/resources/junit-platform.properties b/homework-2/src/test/resources/junit-platform.properties
new file mode 100644
--- /dev/null	(date 1676874212504)
+++ b/homework-2/src/test/resources/junit-platform.properties	(date 1676874212504)
@@ -0,0 +1,2 @@
+junit.jupiter.execution.parallel.enabled=true
+junit.jupiter.execution.parallel.config.strategy=dynamic
\ No newline at end of file
Index: homework-1/src/main/resources/tasks.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/resources/tasks.csv b/homework-1/src/main/resources/tasks.csv
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/resources/tasks.csv	(date 1676035914000)
@@ -0,0 +1,6 @@
+question;answer
+1-1;0
+2+2;4
+3-1;2
+5+2;7
+5+9;14
\ No newline at end of file
Index: homework-1/src/main/java/ru/otus/homework/service/impl/TaskOutputServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/service/impl/TaskOutputServiceImpl.java b/homework-1/src/main/java/ru/otus/homework/service/impl/TaskOutputServiceImpl.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/service/impl/TaskOutputServiceImpl.java	(date 1676035914000)
@@ -0,0 +1,29 @@
+package ru.otus.homework.service.impl;
+
+import lombok.RequiredArgsConstructor;
+import ru.otus.homework.model.Task;
+import ru.otus.homework.service.TaskOutputService;
+import ru.otus.homework.service.TaskService;
+
+import java.io.PrintStream;
+import java.util.List;
+import java.util.stream.IntStream;
+
+@RequiredArgsConstructor
+public class TaskOutputServiceImpl implements TaskOutputService {
+
+    private final TaskService taskService;
+    private final PrintStream printStream;
+
+    @Override
+    public void printAll() {
+        List<Task> tasks = taskService.readAll();
+        IntStream.range(0, tasks.size()).forEach(it -> {
+            Task task = tasks.get(it);
+            String template = "Task #%s \n" +
+                    "Mathematical example: %s \n" +
+                    "Right result: %s \n";
+            printStream.printf(template, it + 1, task.getQuestion(), task.getAnswer());
+        });
+    }
+}
Index: homework-1/src/main/resources/spring-context.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/resources/spring-context.xml b/homework-1/src/main/resources/spring-context.xml
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/resources/spring-context.xml	(date 1676035914000)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns="http://www.springframework.org/schema/beans"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+        http://www.springframework.org/schema/beans/spring-beans.xsd">
+
+    <bean id="taskDao" class="ru.otus.homework.dao.impl.TaskDaoImpl">
+        <constructor-arg name="pathToFile" value="tasks.csv"/>
+    </bean>
+
+    <bean id="taskService" class="ru.otus.homework.service.impl.TaskServiceImpl">
+        <constructor-arg name="dao" ref="taskDao"/>
+    </bean>
+
+    <bean id="taskOutputService" class="ru.otus.homework.service.impl.TaskOutputServiceImpl">
+        <constructor-arg name="printStream" value="#{T(java.lang.System).out}"/>
+        <constructor-arg name="taskService" ref="taskService"/>
+    </bean>
+
+    <bean id="testService" class="ru.otus.homework.service.impl.TestServiceImpl">
+        <constructor-arg name="taskOutputService" ref="taskOutputService"/>
+    </bean>
+</beans>
\ No newline at end of file
Index: homework-1/src/main/java/ru/otus/homework/service/impl/TaskServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/service/impl/TaskServiceImpl.java b/homework-1/src/main/java/ru/otus/homework/service/impl/TaskServiceImpl.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/service/impl/TaskServiceImpl.java	(date 1676035914000)
@@ -0,0 +1,19 @@
+package ru.otus.homework.service.impl;
+
+import lombok.RequiredArgsConstructor;
+import ru.otus.homework.dao.TaskDao;
+import ru.otus.homework.model.Task;
+import ru.otus.homework.service.TaskService;
+
+import java.util.List;
+
+@RequiredArgsConstructor
+public class TaskServiceImpl implements TaskService {
+
+    private final TaskDao dao;
+
+    @Override
+    public List<Task> readAll() {
+        return dao.getAll();
+    }
+}
Index: homework-1/src/main/java/ru/otus/homework/service/impl/TestServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/service/impl/TestServiceImpl.java b/homework-1/src/main/java/ru/otus/homework/service/impl/TestServiceImpl.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/service/impl/TestServiceImpl.java	(date 1676035914000)
@@ -0,0 +1,16 @@
+package ru.otus.homework.service.impl;
+
+import lombok.RequiredArgsConstructor;
+import ru.otus.homework.service.TaskOutputService;
+import ru.otus.homework.service.TestService;
+
+@RequiredArgsConstructor
+public class TestServiceImpl implements TestService {
+
+    private final TaskOutputService taskOutputService;
+
+    @Override
+    public void begin() {
+        taskOutputService.printAll();
+    }
+}
Index: homework-1/src/main/java/ru/otus/homework/service/TaskOutputService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/service/TaskOutputService.java b/homework-1/src/main/java/ru/otus/homework/service/TaskOutputService.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/service/TaskOutputService.java	(date 1676035914000)
@@ -0,0 +1,6 @@
+package ru.otus.homework.service;
+
+public interface TaskOutputService {
+
+    void printAll();
+}
Index: homework-1/src/main/java/ru/otus/homework/service/TestService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/service/TestService.java b/homework-1/src/main/java/ru/otus/homework/service/TestService.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/service/TestService.java	(date 1676035914000)
@@ -0,0 +1,6 @@
+package ru.otus.homework.service;
+
+public interface TestService {
+
+    void begin();
+}
Index: homework-1/src/main/java/ru/otus/homework/service/TaskService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/service/TaskService.java b/homework-1/src/main/java/ru/otus/homework/service/TaskService.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/service/TaskService.java	(date 1676035914000)
@@ -0,0 +1,10 @@
+package ru.otus.homework.service;
+
+import ru.otus.homework.model.Task;
+
+import java.util.List;
+
+public interface TaskService {
+
+    List<Task> readAll();
+}
Index: homework-1/src/main/java/ru/otus/homework/dao/impl/TaskDaoImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/dao/impl/TaskDaoImpl.java b/homework-1/src/main/java/ru/otus/homework/dao/impl/TaskDaoImpl.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/dao/impl/TaskDaoImpl.java	(date 1676035914000)
@@ -0,0 +1,35 @@
+package ru.otus.homework.dao.impl;
+
+import com.opencsv.bean.CsvToBean;
+import com.opencsv.bean.CsvToBeanBuilder;
+import lombok.RequiredArgsConstructor;
+import ru.otus.homework.dao.TaskDao;
+import ru.otus.homework.model.Task;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.List;
+
+@RequiredArgsConstructor
+public class TaskDaoImpl implements TaskDao {
+
+    private final String pathToFile;
+
+    private List<Task> parseAllTasks() {
+        try (InputStream input = TaskDaoImpl.class.getClassLoader().getResourceAsStream(pathToFile)) {
+            CsvToBean<Task> parser = new CsvToBeanBuilder<Task>(new InputStreamReader(input))
+                    .withType(Task.class)
+                    .withSeparator(';')
+                    .build();
+            return parser.parse();
+        } catch (IOException e) {
+            throw new IllegalStateException(e);
+        }
+    }
+
+    @Override
+    public List<Task> getAll() {
+        return parseAllTasks();
+    }
+}
Index: homework-1/src/main/java/ru/otus/homework/model/Task.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/model/Task.java b/homework-1/src/main/java/ru/otus/homework/model/Task.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/model/Task.java	(date 1676035914000)
@@ -0,0 +1,12 @@
+package ru.otus.homework.model;
+
+import com.opencsv.bean.CsvBindByName;
+import lombok.Data;
+
+@Data
+public class Task {
+    @CsvBindByName(column = "question", required = true)
+    private String question;
+    @CsvBindByName(column = "answer", required = true)
+    private String answer;
+}
Index: homework-2/src/main/java/ru/otus/homework/service/impl/TestServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/service/impl/TestServiceImpl.java b/homework-2/src/main/java/ru/otus/homework/service/impl/TestServiceImpl.java
new file mode 100644
--- /dev/null	(date 1676870197278)
+++ b/homework-2/src/main/java/ru/otus/homework/service/impl/TestServiceImpl.java	(date 1676870197278)
@@ -0,0 +1,48 @@
+package ru.otus.homework.service.impl;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Service;
+import ru.otus.homework.model.Task;
+import ru.otus.homework.model.TestResult;
+import ru.otus.homework.model.UserData;
+import ru.otus.homework.service.PersonInfoIOService;
+import ru.otus.homework.service.TaskService;
+import ru.otus.homework.service.TestService;
+
+import java.util.List;
+
+import static ru.otus.homework.model.TestResult.Status.SUCCESS;
+
+@Service
+@RequiredArgsConstructor
+public class TestServiceImpl implements TestService {
+
+    public static final String ASK_NAME_SURNAME_TEMPLATE = "Write, please, your surname and name: ";
+
+    private final PersonInfoIOService personInfoIOService;
+    private final TaskService taskService;
+    @Value("#{T(java.lang.Float).parseFloat('${passing-score:0}')}")
+    private float passingScore;
+
+    @Override
+    public void begin() {
+        UserData userData = personInfoIOService.readUserData(ASK_NAME_SURNAME_TEMPLATE);
+        TestResult result = startTesting();
+        informUserResult(result, userData);
+    }
+
+    private TestResult startTesting() {
+        List<Task> tasks = taskService.getAll();
+        long countCorrectAnswers = tasks.stream().filter(taskService::complete).count();
+        return new TestResult(Long.valueOf(tasks.size()), countCorrectAnswers, passingScore);
+    }
+
+    private void informUserResult(TestResult result, UserData user) {
+        if (result.getStatus() == SUCCESS) {
+            personInfoIOService.printSucceedResult(user, result);
+        } else {
+            personInfoIOService.printFailedResult(user, result);
+        }
+    }
+}
Index: homework-2/src/main/java/ru/otus/homework/service/impl/PersonInfoIOServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/service/impl/PersonInfoIOServiceImpl.java b/homework-2/src/main/java/ru/otus/homework/service/impl/PersonInfoIOServiceImpl.java
new file mode 100644
--- /dev/null	(date 1676879114442)
+++ b/homework-2/src/main/java/ru/otus/homework/service/impl/PersonInfoIOServiceImpl.java	(date 1676879114442)
@@ -0,0 +1,47 @@
+package ru.otus.homework.service.impl;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import ru.otus.homework.model.TestResult;
+import ru.otus.homework.model.UserData;
+import ru.otus.homework.service.PersonInfoIOService;
+
+import java.io.PrintStream;
+import java.util.Arrays;
+import java.util.Scanner;
+import java.util.stream.Collectors;
+
+import static ru.otus.homework.util.TemplateMessages.FAILED_USER_RESULT;
+import static ru.otus.homework.util.TemplateMessages.SUCCEED_USER_RESULT;
+
+@Service
+@RequiredArgsConstructor
+public class PersonInfoIOServiceImpl implements PersonInfoIOService {
+
+    private final PrintStream printStream;
+    private final Scanner scanner;
+
+    @Override
+    public UserData readUserData(String description) {
+        printStream.print(description);
+        return checkAndConvertArguments(scanner.nextLine().split(" "));
+    }
+
+    @Override
+    public void printSucceedResult(UserData user, TestResult result) {
+        printStream.printf(SUCCEED_USER_RESULT, user.getSurname(), user.getName(), result.getUserScorePretty());
+    }
+
+    @Override
+    public void printFailedResult(UserData user, TestResult result) {
+        printStream.printf(FAILED_USER_RESULT, user.getSurname(), user.getName(), result.getUserScorePretty());
+    }
+
+    private UserData checkAndConvertArguments(String[] args) {
+        if (args == null || args.length != 2) {
+            throw new IllegalArgumentException(String.format("Input data is incorrect, data=%s",
+                    Arrays.stream(args).collect(Collectors.toList())));
+        }
+        return new UserData(args[0], args[1]);
+    }
+}
Index: homework-2/src/main/java/ru/otus/homework/service/impl/TaskServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/service/impl/TaskServiceImpl.java b/homework-2/src/main/java/ru/otus/homework/service/impl/TaskServiceImpl.java
new file mode 100644
--- /dev/null	(date 1676870197285)
+++ b/homework-2/src/main/java/ru/otus/homework/service/impl/TaskServiceImpl.java	(date 1676870197285)
@@ -0,0 +1,30 @@
+package ru.otus.homework.service.impl;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import ru.otus.homework.dao.TaskDao;
+import ru.otus.homework.model.Task;
+import ru.otus.homework.service.TaskIOService;
+import ru.otus.homework.service.TaskService;
+
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+public class TaskServiceImpl implements TaskService {
+
+    private final TaskIOService taskIOService;
+    private final TaskDao dao;
+
+    @Override
+    public List<Task> getAll() {
+        return dao.getAll();
+    }
+
+    @Override
+    public boolean complete(Task task) {
+        taskIOService.askQuestion(task);
+        String userAnswer = taskIOService.getAnswer();
+        return task.getAnswer().equals(userAnswer);
+    }
+}
Index: homework-2/src/main/java/ru/otus/homework/service/TaskService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/service/TaskService.java b/homework-2/src/main/java/ru/otus/homework/service/TaskService.java
new file mode 100644
--- /dev/null	(date 1676624545064)
+++ b/homework-2/src/main/java/ru/otus/homework/service/TaskService.java	(date 1676624545064)
@@ -0,0 +1,13 @@
+package ru.otus.homework.service;
+
+import ru.otus.homework.model.Task;
+
+import java.util.List;
+
+public interface TaskService {
+
+    List<Task> getAll();
+
+    boolean complete(Task task);
+
+}
Index: homework-2/src/main/java/ru/otus/homework/model/TestResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/model/TestResult.java b/homework-2/src/main/java/ru/otus/homework/model/TestResult.java
new file mode 100644
--- /dev/null	(date 1676632250694)
+++ b/homework-2/src/main/java/ru/otus/homework/model/TestResult.java	(date 1676632250694)
@@ -0,0 +1,37 @@
+package ru.otus.homework.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+
+import java.text.DecimalFormat;
+
+@Data
+@AllArgsConstructor
+public class TestResult {
+    private Long countQuestions;
+    private Long countCorrectAnswers;
+    private Float passingScore;
+
+    public enum Status {
+        UNKNOWN, SUCCESS, FAIL
+    }
+
+    public Status getStatus() {
+        if (countQuestions == null || countCorrectAnswers == null || passingScore == null) {
+            return Status.UNKNOWN;
+        } else if (getUserScore() >= passingScore) {
+            return Status.SUCCESS;
+        } else {
+            return Status.FAIL;
+        }
+    }
+
+    public float getUserScore() {
+        return countCorrectAnswers / (float) countQuestions * 100;
+    }
+
+    public String getUserScorePretty() {
+        DecimalFormat df = new DecimalFormat("#.##");
+        return df.format(countCorrectAnswers / (float) countQuestions * 100);
+    }
+}
Index: homework-2/src/test/resources/application-test.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/homework-2/src/test/resources/application-test.properties b/homework-2/src/test/resources/application-test.properties
new file mode 100644
--- /dev/null	(date 1676633131277)
+++ b/homework-2/src/test/resources/application-test.properties	(date 1676633131277)
@@ -0,0 +1,3 @@
+file.tasks.name=test-tasks.csv
+
+passing-score=40.0
\ No newline at end of file
Index: homework-2/src/main/java/ru/otus/homework/service/PersonInfoIOService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/service/PersonInfoIOService.java b/homework-2/src/main/java/ru/otus/homework/service/PersonInfoIOService.java
new file mode 100644
--- /dev/null	(date 1676629894196)
+++ b/homework-2/src/main/java/ru/otus/homework/service/PersonInfoIOService.java	(date 1676629894196)
@@ -0,0 +1,13 @@
+package ru.otus.homework.service;
+
+import ru.otus.homework.model.TestResult;
+import ru.otus.homework.model.UserData;
+
+public interface PersonInfoIOService {
+
+    UserData readUserData(String description);
+
+    void printSucceedResult(UserData user, TestResult result);
+
+    void printFailedResult(UserData user, TestResult result);
+}
Index: homework-2/src/test/resources/test-tasks.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/test/resources/test-tasks.csv b/homework-2/src/test/resources/test-tasks.csv
new file mode 100644
--- /dev/null	(date 1676880325342)
+++ b/homework-2/src/test/resources/test-tasks.csv	(date 1676880325342)
@@ -0,0 +1,4 @@
+question;answer
+4-4;0
+2-2;0
+3-3;0
\ No newline at end of file
Index: homework-2/src/main/java/ru/otus/homework/model/Task.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/model/Task.java b/homework-2/src/main/java/ru/otus/homework/model/Task.java
new file mode 100644
--- /dev/null	(date 1676880794757)
+++ b/homework-2/src/main/java/ru/otus/homework/model/Task.java	(date 1676880794757)
@@ -0,0 +1,16 @@
+package ru.otus.homework.model;
+
+import com.opencsv.bean.CsvBindByName;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class Task {
+    @CsvBindByName(column = "question", required = true)
+    private String question;
+    @CsvBindByName(column = "answer", required = true)
+    private String answer;
+}
Index: homework-2/src/main/java/ru/otus/homework/service/TestService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/service/TestService.java b/homework-2/src/main/java/ru/otus/homework/service/TestService.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-2/src/main/java/ru/otus/homework/service/TestService.java	(date 1676035914000)
@@ -0,0 +1,6 @@
+package ru.otus.homework.service;
+
+public interface TestService {
+
+    void begin();
+}
Index: homework-2/src/main/java/ru/otus/homework/dao/impl/TaskDaoImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/dao/impl/TaskDaoImpl.java b/homework-2/src/main/java/ru/otus/homework/dao/impl/TaskDaoImpl.java
new file mode 100644
--- /dev/null	(date 1676880325307)
+++ b/homework-2/src/main/java/ru/otus/homework/dao/impl/TaskDaoImpl.java	(date 1676880325307)
@@ -0,0 +1,41 @@
+package ru.otus.homework.dao.impl;
+
+import com.opencsv.bean.CsvToBean;
+import com.opencsv.bean.CsvToBeanBuilder;
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.PropertySource;
+import org.springframework.stereotype.Repository;
+import ru.otus.homework.dao.TaskDao;
+import ru.otus.homework.model.Task;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.List;
+
+@Repository
+@PropertySource("classpath:application.properties")
+@RequiredArgsConstructor
+public class TaskDaoImpl implements TaskDao {
+
+    @Value("${file.tasks.name}")
+    private String fileName;
+
+    @Override
+    public List<Task> getAll() {
+        return parseAllTasks();
+    }
+
+    private List<Task> parseAllTasks() {
+        try (InputStream input = TaskDaoImpl.class.getClassLoader().getResourceAsStream(fileName)) {
+            CsvToBeanBuilder<Task> taskCsvToBeanBuilder = new CsvToBeanBuilder<Task>(new InputStreamReader(input));
+            taskCsvToBeanBuilder.withType(Task.class);
+            taskCsvToBeanBuilder.withSeparator(';');
+            CsvToBean<Task> parser = taskCsvToBeanBuilder.build();
+            return parser.parse();
+        } catch (IOException e) {
+            throw new IllegalStateException(e);
+        }
+    }
+}
Index: homework-2/src/main/java/ru/otus/homework/dao/TaskDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/dao/TaskDao.java b/homework-2/src/main/java/ru/otus/homework/dao/TaskDao.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-2/src/main/java/ru/otus/homework/dao/TaskDao.java	(date 1676035914000)
@@ -0,0 +1,10 @@
+package ru.otus.homework.dao;
+
+import ru.otus.homework.model.Task;
+
+import java.util.List;
+
+public interface TaskDao {
+
+    List<Task> getAll();
+}
Index: homework-2/src/main/java/ru/otus/homework/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/Main.java b/homework-2/src/main/java/ru/otus/homework/Main.java
new file mode 100644
--- /dev/null	(date 1676633610723)
+++ b/homework-2/src/main/java/ru/otus/homework/Main.java	(date 1676633610723)
@@ -0,0 +1,17 @@
+package ru.otus.homework;
+
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.ComponentScan;
+import org.springframework.context.annotation.Configuration;
+import ru.otus.homework.service.TestService;
+
+@Configuration
+@ComponentScan
+public class Main {
+
+    public static void main(String[] args) {
+        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Main.class);
+        TestService service = context.getBean(TestService.class);
+        service.begin();
+    }
+}
\ No newline at end of file
Index: homework-2/src/test/java/ru/otus/homework/dao/impl/TaskDaoImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/test/java/ru/otus/homework/dao/impl/TaskDaoImplTest.java b/homework-2/src/test/java/ru/otus/homework/dao/impl/TaskDaoImplTest.java
new file mode 100644
--- /dev/null	(date 1676887355351)
+++ b/homework-2/src/test/java/ru/otus/homework/dao/impl/TaskDaoImplTest.java	(date 1676887355351)
@@ -0,0 +1,44 @@
+package ru.otus.homework.dao.impl;
+
+import lombok.val;
+import org.assertj.core.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.test.context.TestPropertySource;
+import ru.otus.homework.dao.TaskDao;
+import ru.otus.homework.model.Task;
+
+import java.util.List;
+
+@DisplayName("Тестирование TaskDao")
+
+@TestPropertySource(properties = "classpath:application-test.properties")
+class TaskDaoImplTest {
+
+    @Value("${file.tasks.name}")
+    private String fileName;
+
+    private TaskDao taskDao;
+
+    @BeforeEach
+    public void setUp() {
+        taskDao = new TaskDaoImpl();
+    }
+
+    @DisplayName("Считывание заданий из файла прошло успешно")
+    @Test
+    public void should() {
+        val expected = List.of(
+                new Task("4-4", "0"),
+                new Task("2-2", "0"),
+                new Task("3-3", "0")
+        );
+        val actual = taskDao.getAll();
+        Assertions.assertThat(actual).hasSize(3).isEqualTo(expected);
+    }
+
+}
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/.gitignore	(date 1676035914000)
@@ -0,0 +1,33 @@
+HELP.md
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/README.md	(date 1676035914000)
@@ -0,0 +1,1 @@
+# 2022-11-otus-spring-zavialov
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/pom.xml	(date 1676035914000)
@@ -0,0 +1,21 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>ru.otus.homework</groupId>
+    <artifactId>otus-spring-homeworks</artifactId>
+    <packaging>pom</packaging>
+    <version>1.0.0-SNAPSHOT</version>
+    <modules>
+        <module>homework-1</module>
+        <module>homework-2</module>
+    </modules>
+
+    <properties>
+        <maven.compiler.source>11</maven.compiler.source>
+        <maven.compiler.target>11</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+</project>
\ No newline at end of file
Index: homework-2/src/main/java/ru/otus/homework/model/UserData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/model/UserData.java b/homework-2/src/main/java/ru/otus/homework/model/UserData.java
new file mode 100644
--- /dev/null	(date 1676630862000)
+++ b/homework-2/src/main/java/ru/otus/homework/model/UserData.java	(date 1676630862000)
@@ -0,0 +1,11 @@
+package ru.otus.homework.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+
+@Data
+@AllArgsConstructor
+public class UserData {
+    private String surname;
+    private String name;
+}
Index: homework-2/src/main/java/ru/otus/homework/service/impl/TaskIOServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/service/impl/TaskIOServiceImpl.java b/homework-2/src/main/java/ru/otus/homework/service/impl/TaskIOServiceImpl.java
new file mode 100644
--- /dev/null	(date 1676880048295)
+++ b/homework-2/src/main/java/ru/otus/homework/service/impl/TaskIOServiceImpl.java	(date 1676880048295)
@@ -0,0 +1,29 @@
+package ru.otus.homework.service.impl;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import ru.otus.homework.model.Task;
+import ru.otus.homework.service.TaskIOService;
+
+import java.io.PrintStream;
+import java.util.Scanner;
+
+import static ru.otus.homework.util.TemplateMessages.ASK_QUESTION;
+
+@Service
+@RequiredArgsConstructor
+public class TaskIOServiceImpl implements TaskIOService {
+
+    private final PrintStream printStream;
+    private final Scanner scanner;
+
+    @Override
+    public void askQuestion(Task task) {
+        printStream.printf(ASK_QUESTION, task.getQuestion());
+    }
+
+    @Override
+    public String getAnswer() {
+        return scanner.nextLine();
+    }
+}
Index: homework-2/src/main/resources/tasks.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/resources/tasks.csv b/homework-2/src/main/resources/tasks.csv
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-2/src/main/resources/tasks.csv	(date 1676035914000)
@@ -0,0 +1,6 @@
+question;answer
+1-1;0
+2+2;4
+3-1;2
+5+2;7
+5+9;14
\ No newline at end of file
Index: homework-1/src/main/java/ru/otus/homework/dao/TaskDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/dao/TaskDao.java b/homework-1/src/main/java/ru/otus/homework/dao/TaskDao.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/dao/TaskDao.java	(date 1676035914000)
@@ -0,0 +1,10 @@
+package ru.otus.homework.dao;
+
+import ru.otus.homework.model.Task;
+
+import java.util.List;
+
+public interface TaskDao {
+
+    List<Task> getAll();
+}
Index: homework-1/src/main/java/ru/otus/homework/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/src/main/java/ru/otus/homework/Main.java b/homework-1/src/main/java/ru/otus/homework/Main.java
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/src/main/java/ru/otus/homework/Main.java	(date 1676035914000)
@@ -0,0 +1,14 @@
+package ru.otus.homework;
+
+import org.springframework.context.support.ClassPathXmlApplicationContext;
+import ru.otus.homework.service.TestService;
+
+
+public class Main {
+
+    public static void main(String[] args) {
+        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("/spring-context.xml");
+        TestService testService = context.getBean(TestService.class);
+        testService.begin();
+    }
+}
\ No newline at end of file
Index: homework-2/src/test/java/ru/otus/homework/service/impl/PersonInfoIOServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/test/java/ru/otus/homework/service/impl/PersonInfoIOServiceImplTest.java b/homework-2/src/test/java/ru/otus/homework/service/impl/PersonInfoIOServiceImplTest.java
new file mode 100644
--- /dev/null	(date 1676879776773)
+++ b/homework-2/src/test/java/ru/otus/homework/service/impl/PersonInfoIOServiceImplTest.java	(date 1676879776773)
@@ -0,0 +1,85 @@
+package ru.otus.homework.service.impl;
+
+import lombok.SneakyThrows;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.parallel.Execution;
+import org.junit.jupiter.api.parallel.ExecutionMode;
+import ru.otus.homework.model.TestResult;
+import ru.otus.homework.model.UserData;
+import ru.otus.homework.service.PersonInfoIOService;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.PrintStream;
+import java.nio.charset.StandardCharsets;
+import java.util.Scanner;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static ru.otus.homework.util.TemplateMessages.FAILED_USER_RESULT;
+import static ru.otus.homework.util.TemplateMessages.SUCCEED_USER_RESULT;
+
+
+@Execution(ExecutionMode.CONCURRENT)
+@DisplayName("Тестирование PersonInfoIOService")
+class PersonInfoIOServiceImplTest {
+
+    private ByteArrayOutputStream outputStream;
+    private ByteArrayInputStream inputStream;
+    private PersonInfoIOService personInfoIOService;
+
+    @BeforeEach
+    void setUp() {
+        System.out.println(Thread.currentThread().getName());
+        outputStream = new ByteArrayOutputStream();
+        inputStream = new ByteArrayInputStream("Ivanov Ivan".getBytes(StandardCharsets.UTF_8));
+        System.setIn(inputStream);
+        personInfoIOService = new PersonInfoIOServiceImpl(new PrintStream(outputStream), new Scanner(inputStream));
+    }
+
+    @DisplayName("Сообщение, что тест пройден успешно")
+    @SneakyThrows
+    @Test
+    void shouldPrintSucceedResult() {
+        UserData user = new UserData("Ivanov", "Ivan");
+        TestResult result = new TestResult(10L, 9L, 70.0f);
+        personInfoIOService.printSucceedResult(user, result);
+        Thread.sleep(1000);
+        assertThat(outputStream.toString()).isEqualTo(String.format(SUCCEED_USER_RESULT,
+                user.getSurname(), user.getName(), result.getUserScorePretty()));
+    }
+
+    @DisplayName("Сообщение, что тест не пройден")
+    @SneakyThrows
+    @Test
+    void shouldPrintFailedResult() {
+        UserData user = new UserData("Ivanov", "Ivan");
+        TestResult result = new TestResult(10L, 9L, 70.0f);
+        personInfoIOService.printFailedResult(user, result);
+        Thread.sleep(1000);
+        assertThat(outputStream.toString()).isEqualTo(String.format(FAILED_USER_RESULT,
+                user.getSurname(), user.getName(), result.getUserScorePretty()));
+    }
+
+    @DisplayName("Успешное считывание UserData")
+    @SneakyThrows
+    @Test
+    void shouldReadUserDataSuccessfully() {
+        UserData expected = new UserData("Ivanov", "Ivan");
+        UserData actual = personInfoIOService.readUserData("");
+        assertThat(actual).isEqualTo(expected);
+    }
+
+    @DisplayName("Ошибочное считывание UserData")
+    @SneakyThrows
+    @Test
+    void shouldReadUserDataFailed() {
+        outputStream = new ByteArrayOutputStream();
+        inputStream = new ByteArrayInputStream("Ivanov Ivan Ivanovich".getBytes(StandardCharsets.UTF_8));
+        System.setIn(inputStream);
+        personInfoIOService = new PersonInfoIOServiceImpl(new PrintStream(outputStream), new Scanner(inputStream));
+        Throwable th = org.junit.jupiter.api.Assertions.assertThrows(IllegalArgumentException.class, () -> personInfoIOService.readUserData(""));
+        assertThat(th.getMessage()).isEqualTo("Input data is incorrect, data=[Ivanov, Ivan, Ivanovich]");
+    }
+}
\ No newline at end of file
Index: homework-2/src/main/java/ru/otus/homework/config/ServiceConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/config/ServiceConfig.java b/homework-2/src/main/java/ru/otus/homework/config/ServiceConfig.java
new file mode 100644
--- /dev/null	(date 1676630510749)
+++ b/homework-2/src/main/java/ru/otus/homework/config/ServiceConfig.java	(date 1676630510749)
@@ -0,0 +1,21 @@
+package ru.otus.homework.config;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import java.io.PrintStream;
+import java.util.Scanner;
+
+@Configuration
+public class ServiceConfig {
+
+    @Bean
+    public PrintStream printStream() {
+        return System.out;
+    }
+
+    @Bean
+    public Scanner scanner() {
+        return new Scanner(System.in);
+    }
+}
Index: homework-2/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/homework-2/src/main/resources/application.properties b/homework-2/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1676630576133)
+++ b/homework-2/src/main/resources/application.properties	(date 1676630576133)
@@ -0,0 +1,3 @@
+file.tasks.name=tasks.csv
+
+passing-score=60.0
\ No newline at end of file
Index: homework-2/src/main/java/ru/otus/homework/util/TemplateMessages.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/util/TemplateMessages.java b/homework-2/src/main/java/ru/otus/homework/util/TemplateMessages.java
new file mode 100644
--- /dev/null	(date 1676870438538)
+++ b/homework-2/src/main/java/ru/otus/homework/util/TemplateMessages.java	(date 1676870438538)
@@ -0,0 +1,14 @@
+package ru.otus.homework.util;
+
+public class TemplateMessages {
+
+    public static final String ASK_QUESTION = "Write the correct answer\n %s=";
+
+    public static final String SUCCEED_USER_RESULT = "Dear user, %s %s!\n" +
+            "You passed the test successfully!\n" +
+            "Your result is %s percent";
+
+    public static final String FAILED_USER_RESULT = "Dear user, %s %s!\n" +
+            "Unfortunately, you failed the test.\n" +
+            "Your result is %s percent";
+}
Index: homework-2/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/pom.xml b/homework-2/pom.xml
new file mode 100644
--- /dev/null	(date 1676887271693)
+++ b/homework-2/pom.xml	(date 1676887271693)
@@ -0,0 +1,96 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>homework-2</artifactId>
+    <groupId>ru.otus.homework</groupId>
+    <version>1.0.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>11</maven.compiler.source>
+        <maven.compiler.target>11</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <junit.jupiter.version>5.9.0</junit.jupiter.version>
+        <mockito.version>4.8.0</mockito.version>
+        <assertj.version>3.23.1</assertj.version>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-context</artifactId>
+            <version>5.3.24</version>
+        </dependency>
+        <dependency>
+            <groupId>com.opencsv</groupId>
+            <artifactId>opencsv</artifactId>
+            <version>5.7.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.18.24</version>
+            <scope>compile</scope>
+        </dependency>
+
+        <!-- Testing-->
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
+            <version>${junit.jupiter.version}</version>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-engine</artifactId>
+            <version>${junit.jupiter.version}</version>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-params</artifactId>
+            <version>${junit.jupiter.version}</version>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-test</artifactId>
+            <version>5.3.24</version>
+            <scope>test</scope>
+        </dependency>
+
+        <!-- Mockito -->
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <version>${mockito.version}</version>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-junit-jupiter</artifactId>
+            <version>${mockito.version}</version>
+            <scope>test</scope>
+        </dependency>
+
+        <!-- AssetrtJ -->
+        <dependency>
+            <groupId>org.assertj</groupId>
+            <artifactId>assertj-core</artifactId>
+            <version>${assertj.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>4.13.2</version>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+</project>
\ No newline at end of file
Index: homework-2/src/main/java/ru/otus/homework/service/TaskIOService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-2/src/main/java/ru/otus/homework/service/TaskIOService.java b/homework-2/src/main/java/ru/otus/homework/service/TaskIOService.java
new file mode 100644
--- /dev/null	(date 1676880048344)
+++ b/homework-2/src/main/java/ru/otus/homework/service/TaskIOService.java	(date 1676880048344)
@@ -0,0 +1,10 @@
+package ru.otus.homework.service;
+
+import ru.otus.homework.model.Task;
+
+public interface TaskIOService {
+
+    void askQuestion(Task task);
+
+    String getAnswer();
+}
Index: homework-1/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-1/pom.xml b/homework-1/pom.xml
new file mode 100644
--- /dev/null	(date 1676035914000)
+++ b/homework-1/pom.xml	(date 1676035914000)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>homework-1</artifactId>
+    <groupId>ru.otus.homework</groupId>
+    <version>1.0.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>11</maven.compiler.source>
+        <maven.compiler.target>11</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-context</artifactId>
+            <version>5.3.24</version>
+        </dependency>
+        <dependency>
+            <groupId>com.opencsv</groupId>
+            <artifactId>opencsv</artifactId>
+            <version>5.7.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.18.24</version>
+            <scope>compile</scope>
+        </dependency>
+    </dependencies>
+
+</project>
\ No newline at end of file
